<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>One Sinple Page</title>
  
  <subtitle>大道至简</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-08T21:04:18.172Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kelvin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客搭建过程</title>
    <link href="http://example.com/2024/01/08/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/01/08/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2024-01-07T16:00:00.000Z</published>
    <updated>2024-01-08T21:04:18.172Z</updated>
    
    <content type="html"><![CDATA[<p>经过漫长的<code>折磨</code>终于搭建起了我的个人博客<br>在这中我遇到了属实多的问题,大约花费了我一整天时间,但不包括这篇文档<br>接下来我将从零记录一下我的经历,也希望对你博客搭建起到帮助<br>都说博客是i人的社交工具,我想的确是这样的&#x2F;dog</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><a href="https://git-scm.com/">git</a><br> git的配置相当简单<br> 详细请参看<a href="https://blog.csdn.net/mukes/article/details/115693833">这篇博客</a>当然<code>csdn</code>本身就是一个博客网站</li><li><a href="https://nodejs.org/en">node.js</a><br> node.js的配置就有点复杂,涉及到了环境变量的配置<br>这是推荐的<a href="https://zhuanlan.zhihu.com/p/86241466">参考博客</a><strong>来自知乎</strong></li></ol><ul><li>在node.js根目录中增加两个文件夹</li><li>在安装目录下，如 <code>D:\soft\nodejs</code> 新建两个文件夹 <code>node_global</code>(全局包存放目录) 和 <code>node_cache</code>(缓存目录);</li><li>打开命令行工具，执行以下两句操作：<br> <code>npm config set prefix &quot;D:\soft\nodejs\node_global&quot;</code><br> <code>npm config set cache &quot;D:\soft\nodejs\node_cache&quot;</code>  </li><li>配置环境变量：<br> 环境变量截图<br> 要把原来的<code>npm</code>替换<img src="https://telegraph-image-2n3.pages.dev/file/f788895bac96ce1ae3bf4.png" alt="环境变量"><br> 新增变量<img src="https://telegraph-image-2n3.pages.dev/file/00b8d2d260d6639761f2b.png" alt="环境变量"></li></ul><p>完成以上步骤大体可以运行了</p><h2 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo 博客框架"></a>Hexo 博客框架</h2><p><a href="https://hexo.io/zh-cn/">hexo</a>由于我要安装的主题是<code>安知鱼</code>,所以选择这个框架<br>在你的磁盘创建一个文件夹用于存放博客文件 ; 例 <code>/D/Blog</code></p><p>在 <code>git Bush</code> 中运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>恭喜你,你成功创建了一个个人博客<br><img src="https://telegraph-image-2n3.pages.dev/file/efd061b37fd59b52e4829.png" alt="hexo原始"></p><p>注:这一步可能会出现各种的错,尝试重启电脑或在管理员权限下运行窗口</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>就上文所言,我选择的是<code>anzhiyu</code>的主题包<br>官方文档:<a href="https://docs.anheyu.com/initall.html">https://docs.anheyu.com/initall.html</a></p><ul><li>解决报错问题<br> pug组件失效,或多余依赖加载出错<img src="https://user-images.githubusercontent.com/26118845/273550524-2963cb7f-9923-44d0-b8fd-a46f8f649897.png" alt="报错"><img src="https://user-images.githubusercontent.com/26118845/273550554-8b563416-9693-49bb-8ffc-163eaa3600bd.png" alt="报错"><br> &#x3D;&#x3D;解决办法&#x3D;&#x3D;<br> 你可以查看一下你的package.json文件中是否有多余的依赖。我遇到和你一样的问题，其中就是因为package.json有多余的依赖导致的，你可以尝试这个依赖，如果有的话。将其删除即可 <code>&quot;hexo-renderer-jade&quot;: &quot;^0.5.0&quot;</code><img src="https://telegraph-image-2n3.pages.dev/file/9a2b7cd2a5b96951be49f.png" alt="CleanShot 2023-10-27 at 19 37 43@2x"><br> <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/issues/134#issuecomment-1782714356">相关issuse</a></li></ul><p>根据你的需求配置你的博客界面</p><h2 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h2><h3 id="连接账号"><a href="#连接账号" class="headerlink" title="连接账号"></a>连接账号</h3><ul><li>在Git中绑定Github账号，打开“Git Bash”，在命令框中依次输入两行命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “Your Name”</span><br><span class="line">git config --global user.email email@example.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span></span><br></pre></td></tr></table></figure><h3 id="将博客部署在GitHub上"><a href="#将博客部署在GitHub上" class="headerlink" title="将博客部署在GitHub上"></a>将博客部署在GitHub上</h3><ul><li>点击 Start project 或者下面的 new repository 建立一个新的仓库，注意Github 仅能使用一个同名仓库的代码托管一个静态站点，这里注意仓库名一定要是： <code>用户名.github.io</code></li><li>配置 SSH key ，要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 作准备。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br><span class="line">ssh-keygen -t rsa -C &#x27;上面的邮箱&#x27;</span><br></pre></td></tr></table></figure><ul><li>按照提示完成三次回车，便可生成 <code>ssh key</code>，采用以下指令也可以查看自己的ssh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>首次使用还须要确认并添加主机到本机SSH可信列表。若返回 <code>Hi xxx! You&#39;ve successfullyauthenticated, but GitHub does not provide shell access.</code> 内容，则证实添加成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><ul><li>登陆 Github 上添加刚刚生成的SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSHand GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你的 SSH keys 列表里就会看到你刚刚添加的密钥。<img src="https://telegraph-image-2n3.pages.dev/file/cb5185dbbfd4b288f508c.png" alt="ssh"><img src="https://telegraph-image-2n3.pages.dev/file/2828fca39faa3cb8ac18e.png" alt="github-ssh"></li><li>此时，本地和Github的工做作得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署教程。先不着急，部署以前还须要修改配置和安装部署插件。  第一：打开项目根目录下的<code>_config.yml</code> 配置文件配置参数。拉到文件末尾，填上以下配置。<img src="https://telegraph-image-2n3.pages.dev/file/cdf69104031bd73308041.png" alt="配置"></li><li>第二要安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>最后执行如下两条命令就能够部署上传啦，如下 g 是 generate 缩写，d 是 deploy 缩写</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 先生成</span><br><span class="line">hexo d # 部署到Github上</span><br></pre></td></tr></table></figure><ul><li>这时用浏览器输入 <code>用户名.github.io</code> 就可以访问刚才的网站啦。</li></ul><h3 id="文章上传"><a href="#文章上传" class="headerlink" title="文章上传"></a>文章上传</h3><ul><li>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档能够看 <a href="https://hexo.io/zh-cn/">hexo 官网</a>。新建文章，输入如下命令便可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#x27;文章标题&#x27;</span><br></pre></td></tr></table></figure><ul><li>执行完成后能够在 &#x2F;source&#x2F;_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown格式的文件，具体用法能够在网上找一下，语法仍是比较简单的。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: blogTest</span><br><span class="line">date: 2021-08-20 18:07:21</span><br><span class="line">tags: Test</span><br><span class="line"><span class="section">categories: blog1</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">### 1. This is a blog Test</span></span><br><span class="line"><span class="bullet">*</span> First</span><br><span class="line"><span class="section">* Second</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">### 2. Show Text</span></span><br><span class="line"><span class="bullet">*</span> <span class="strong">**这是加粗**</span></span><br><span class="line"><span class="quote">&gt; <span class="emphasis">*这是斜体*</span></span></span><br></pre></td></tr></table></figure><ul><li>之后依次输入以下命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成文件</span><br><span class="line">hexo s # 本地服务器查看网站</span><br><span class="line">hexo d # 部署到Github 上</span><br></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="换行错误"><a href="#换行错误" class="headerlink" title="换行错误"></a>换行错误</h3><p><img src="https://telegraph-image-2n3.pages.dev/file/1968ccb4c5812f319b36b.png" alt="报错"><img src="https://telegraph-image-2n3.pages.dev/file/6927e3dd021608e87ac24.png" alt="报错"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li><p>使用<code>git add --renormalize .</code>命令来对所有的文件进行换行符的转换，这会根据您的<code>core.autocrlf</code>选项来自动调整换行符。</p><ul><li><code>git init</code>创建空git文件夹</li><li>使用<code>git config --global core.autocrlf</code>命令来重新设置您的<code>core.autocrlf</code>选项，然后使用<code>git reset --hard</code>命令来重置您的仓库状态，这会覆盖您的本地文件，所以请确保您已经备份了您的重要文件。</li><li>使用<code>git rm --cached -r .</code>命令来移除所有的文件的缓存，然后使用<code>git add .</code>命令来重新添加所有的文件，这会根据您的<code>core.autocrlf</code>选项来自动调整换行符。</li></ul></li><li><p>全局配置</p><ul><li>在 Linux&#x2F;OSX 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><p>这将修复任何 <code>CRLF</code>到 <code>LF</code>当你承诺的时候。</p><ul><li>在 Windows 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这将确保当您在 Windows 中结帐时，所有 <code>LF</code>将被转换为 <code>CRLF</code>.</p><ul><li>.gitattributes 文件</li></ul><p>保留一个 <code>.gitattributes</code>文件，因为我们不希望团队中的每个人都设置自己的配置。 该文件应放置在存储库根目录中，如果存在，git 将尊重它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* text=auto</span><br></pre></td></tr></table></figure><p>这会将所有文件视为文本文件，并转换为操作系统的结帐行结尾并返回到 <code>LF</code>自动提交。 如果要显式指定行结束符，可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* text eol=crlf</span><br><span class="line">* text eol=lf</span><br></pre></td></tr></table></figure><p>第一个用于结帐，第二个用于提交。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.jpg binary</span><br></pre></td></tr></table></figure><p>这将治疗所有 <code>.jpg</code>图像作为二进制文件，无论路径如何。 所以不需要转换。</p><p>或者您可以添加路径限定符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_path/**/*.jpg binary</span><br></pre></td></tr></table></figure></li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>忙活了一天终于有了自己的博客,虽然挂载在GitHub上,但相信在不久的将来会有一个全新的域名 <code>/kelven.*</code>,欢迎指出错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经过漫长的&lt;code&gt;折磨&lt;/code&gt;终于搭建起了我的个人博客&lt;br&gt;在这中我遇到了属实多的问题,大约花费了我一整天时间,但不包括这篇文档&lt;br&gt;接下来我将从零记录一下我的经历,也希望对你博客搭建起到帮助&lt;br&gt;都说博客是i人的社交工具,我想的确是这样的&amp;#x2F;dog</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
    <category term="node.js" scheme="http://example.com/tags/node-js/"/>
    
  </entry>
  
</feed>
